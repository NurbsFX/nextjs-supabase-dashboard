----------------------------------------------------------------
--                                                            --
--                    public.notifications                    --
--                                                            --
----------------------------------------------------------------

drop trigger if exists handle_updated_at on notifications;

drop table if exists notifications;

----------------------------------------------------------------

create table notifications (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references users(id) on delete cascade not null,
  marketing_emails boolean default false not null,
  security_emails boolean default true not null
);

-- Secure the table
alter table notifications enable row level security;

-- Add row-level security
create policy "Users can view their notification." on notifications for select to authenticated using ( (select auth.uid()) = user_id );
create policy "Users can insert their own notification." on notifications for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "Users can update their own notification." on notifications for update to authenticated using ( (select auth.uid()) = user_id );
create policy "Users can delete their own notification." on notifications for delete to authenticated using ( (select auth.uid()) = user_id );

-- Update a column timestamp on every update.
create extension if not exists moddatetime schema extensions;

-- assuming the table name is "notifications", and a timestamp column "updated_at"
-- this trigger will set the "updated_at" column to the current timestamp for every update
create trigger handle_updated_at before update on notifications
  for each row execute procedure moddatetime (updated_at);
