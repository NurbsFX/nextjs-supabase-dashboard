----------------------------------------------------------------
--                                                            --
--                        public.tags                         --
--                                                            --
----------------------------------------------------------------

drop trigger if exists on_slug_upsert on tags;

drop function if exists unique_tag_slug;

drop table if exists tags;

----------------------------------------------------------------

create table tags (
  id bigint generated by default as identity primary key,
  name text,
  slug text,
  description text,
  unique (slug)
);

-- Add table indexing
create index tags_name_idx on tags (name);

-- Secure the table
alter table tags enable row level security;

-- Add row-level security
create policy "Public access for all users" on tags for select to authenticated, anon using ( true );
create policy "User can insert tags" on tags for insert to authenticated with check ( true );
create policy "User can update tags" on tags for update to authenticated using ( true );
create policy "User can delete tags" on tags for delete to authenticated using ( true );

----------------------------------------------------------------

create or replace function unique_tag_slug()
returns trigger
security definer set search_path = public
as $$
declare
  old_slug text;
  new_slug text;
  counter integer := 1;
begin
  old_slug := new.slug;
  new_slug := old_slug;

  loop
    if exists (select 1 from tags where slug = new_slug and id != coalesce(new.id, 0)) then
      new_slug := old_slug || '-' || counter;
      counter := counter + 1;
    else
      exit;
    end if;
  end loop;

  new.slug := new_slug;
  return new;
end;
$$ language plpgsql;

create trigger on_slug_upsert before insert or update of slug on tags
  for each row execute function unique_tag_slug();
