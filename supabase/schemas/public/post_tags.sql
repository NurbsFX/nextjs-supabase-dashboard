----------------------------------------------------------------
--                                                            --
--                      public.post_tags                      --
--                                                            --
----------------------------------------------------------------

drop function if exists set_post_tags;

drop table if exists post_tags;

----------------------------------------------------------------

-- Create a table
create table post_tags (
  id bigint generated by default as identity primary key,
  user_id uuid references users(id) on delete cascade not null,
  post_id bigint references posts(id) on delete cascade not null,
  tag_id bigint references tags(id) on delete cascade not null,
  unique (user_id, post_id, tag_id)
);

-- Add table indexing
create index post_tags_user_id_idx on post_tags (user_id);
create index post_tags_post_id_idx on post_tags (post_id);
create index post_tags_tag_id_idx on post_tags (tag_id);
create index post_tags_user_id_post_id_idx on post_tags (user_id, post_id);

-- Secure the table
alter table post_tags enable row level security;

-- Add row-level security
create policy "Public access for all users" on post_tags for select to authenticated, anon using ( true );
create policy "User can insert their own post_tags" on post_tags for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own post_tags" on post_tags for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own post_tags" on post_tags for delete to authenticated using ( (select auth.uid()) = user_id );

----------------------------------------------------------------

create or replace function set_post_tags(
  userid uuid,
  postid bigint,
  added json[],
  removed json[]
)
returns setof post_tags
security definer set search_path = public
as $$
declare
  tag json;
  tagid bigint;
begin

 	foreach tag in array removed loop
	  delete from post_tags pt
    using tags t
    where pt.user_id = userid and pt.post_id = postid and pt.tag_id = t.id and t.name = (tag ->> 'name')::text;
 	end loop;

 	foreach tag in array added loop
		if exists (select 1 from tags t where t.user_id = userid and t.name = (tag ->> 'name')::text) then
		  select t.id into tagid from tags t where t.user_id = userid and t.name = (tag ->> 'name')::text;
		else
      insert into tags(user_id, name, slug) values(userid, (tag ->> 'name')::text, (tag ->> 'slug')::text)
      returning id into tagid;
	  end if;
    if not exists (select 1 from post_tags where user_id = userid and post_id = postid and tag_id = tagid) then
	    insert into post_tags(user_id, post_id, tag_id) values(userid, postid, tagid);
    end if;
	end loop;

  return query
  select * from post_tags where user_id = userid and post_id = postid;
end;
$$ language plpgsql;
