-- SQL Editor > New query

drop trigger if exists handle_updated_at on posts;

drop function if exists count_posts;
drop function if exists get_adjacent_post_id;

drop table if exists posts;

create table posts (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  deleted_at timestamptz,
  published_at timestamptz,
  user_id uuid references profiles(id) on delete cascade not null,
  type text default 'post'::text not null,
  status text default 'draft'::text not null,
  password varchar(255),
  slug text,
  title text,
  content text,
  excerpt text,
  thumbnail_url text,
  is_ban boolean default false not null,
  banned_until timestamptz,
  unique(user_id, slug)
);
comment on column posts.type is 'post, page, revision';
comment on column posts.status is 'publish, future, draft, pending, private, trash';

-- Secure the table
alter table posts enable row level security;

-- Add row-level security
create policy "Public posts are viewable by everyone." on posts for select to authenticated, anon using ( true );
create policy "Users can insert their own post." on posts for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "Users can update their own post." on posts for update to authenticated using ( (select auth.uid()) = user_id );
create policy "Users can delete their own post." on posts for delete to authenticated using ( (select auth.uid()) = user_id );

-- Update a column timestamp on every update.
create extension if not exists moddatetime schema extensions;

-- assuming the table name is "posts", and a timestamp column "updated_at"
-- this trigger will set the "updated_at" column to the current timestamp for every update
create trigger handle_updated_at before update on posts
  for each row execute procedure moddatetime (updated_at);

-- const { data, error } = await supabase.rpc('count_posts', { uid: '', post_type: '' });
-- select * from count_posts('uid', 'post_type');

create or replace function count_posts(uid uuid, post_type text default 'post')
returns table(status text, count bigint)
security definer set search_path = public
as $$
begin
  return query
  select p.status, count(*)
  from posts p where p.user_id = uid and type = post_type
  group by p.status;
end;
$$ language plpgsql;

-- const { data, error } = await supabase.rpc('get_adjacent_post_id', { pid: '', uid: '', post_type: '', post_status: '' });
-- select * from get_adjacent_post_id('pid', 'uid', 'post_type', 'post_status');

create or replace function get_adjacent_post_id(
  pid bigint,
  uid uuid,
  post_type text default 'post',
  post_status text default 'publish'
)
returns table(previous_id bigint, next_id bigint)
security definer set search_path = public
as $$
begin
  return query
  select max(case when id < pid then id end),
         min(case when id > pid then id end)
  from posts
  where user_id = uid and type = post_type and status = post_status;
end;
$$ language plpgsql;
