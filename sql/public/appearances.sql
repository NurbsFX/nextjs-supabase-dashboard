-- SQL Editor > New query
-- https://supabase.com/docs/guides/auth/managing-user-data

drop table if exists appearances;
drop type if exists public.app_theme;

create type public.app_theme as enum ('system', 'light', 'dark');
-- alter type public.type_name add value 'new_type';
-- alter type public.type_name rename value 'old_type' to 'new_type';
-- alter type public.type_name rename to new_type_name;

create table appearances (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  user_id uuid references users(id) on delete cascade not null,
  theme public.app_theme default 'system'::app_theme,
  language text default 'en'::text
);
comment on column appearances.theme is 'system, light, dark';

-- Secure the table
alter table appearances enable row level security;

-- Add row-level security
create policy "Users can view their appearance." on appearances for select to authenticated using ( auth.uid() = user_id );
-- create policy "Users can insert their own appearance." on appearances for insert to authenticated with check ( auth.uid() = user_id );
create policy "Users can update their own appearance." on appearances for update to authenticated using ( auth.uid() = user_id );
-- create policy "Users can delete their own appearance." on appearances for delete to authenticated using ( auth.uid() = user_id );

-- Update a column timestamp on every update.
create extension if not exists moddatetime schema extensions;

-- assuming the table name is "appearances", and a timestamp column "updated_at"
-- this trigger will set the "updated_at" column to the current timestamp for every update
drop trigger if exists handle_updated_at on appearances;

create trigger handle_updated_at before update on appearances
  for each row execute procedure moddatetime (updated_at);
