-- Custom Claims & Role-based Access Control (RBAC)
-- https://supabase.com/docs/guides/auth/custom-claims-and-role-based-access-control-rbac

drop table if exists user_plans;
drop function if exists get_user;
-- drop type if exists public.user_plan;

-- create type public.user_plan as enum ('free', 'basic', 'standard', 'premium');
-- alter type public.type_name add value 'new_type';
-- alter type public.type_name rename value 'old_type' to 'new_type';
-- alter type public.type_name rename to new_type_name;

create table user_plans (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  user_id uuid references users(id) on delete cascade not null,
  plan text default 'free'::text not null,
  unique (user_id, plan)
);
comment on column user_plans.plan is 'free, basic, standard, premium';

-- Secure the table
alter table user_plans enable row level security;

-- Add row-level security
create policy "Users can view their plans." on user_plans for select to authenticated using ( auth.uid() = user_id );
-- create policy "Users can insert their own plan." on user_plans for insert to authenticated with check ( auth.uid() = user_id );
create policy "Users can update their own plan." on user_plans for update to authenticated using ( auth.uid() = user_id );
-- create policy "Users can delete their own plan." on user_plans for delete to authenticated using ( auth.uid() = user_id );

-- Update a column timestamp on every update.
create extension if not exists moddatetime schema extensions;

-- assuming the table name is "user_plans", and a timestamp column "updated_at"
-- this trigger will set the "updated_at" column to the current timestamp for every update
drop trigger if exists handle_updated_at on user_plans;

create trigger handle_updated_at before update on user_plans
  for each row execute procedure moddatetime (updated_at);
