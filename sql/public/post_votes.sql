-- SQL Editor > New query

drop function if exists get_post_vote;
drop function if exists set_post_vote;

drop table if exists post_votes;

create table post_votes (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references profiles(id) not null,
  post_id bigint references posts(id) on delete cascade not null,
  is_like smallint default 0 not null,
  is_dislike smallint default 0 not null,
  unique (user_id, post_id)
);

-- Secure the table
alter table post_votes enable row level security;

-- Add row-level security
create policy "Public post_votes are viewable by everyone." on post_votes for select to authenticated, anon using ( true );
create policy "Users can insert their own post_vote." on post_votes for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "Users can update their own post_vote." on post_votes for update to authenticated using ( (select auth.uid()) = user_id );
create policy "Users can delete their own post_vote." on post_votes for delete to authenticated using ( (select auth.uid()) = user_id );

-- Update a column timestamp on every update.
create extension if not exists moddatetime schema extensions;

-- assuming the table name is "post_votes", and a timestamp column "updated_at"
-- this trigger will set the "updated_at" column to the current timestamp for every update
drop trigger if exists handle_updated_at on post_votes;

create trigger handle_updated_at before update on post_votes
  for each row execute procedure moddatetime (updated_at);
